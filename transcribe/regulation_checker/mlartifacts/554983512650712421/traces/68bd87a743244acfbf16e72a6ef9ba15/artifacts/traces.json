{"spans": [{"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "fcVQ9lFwF94=", "trace_state": "", "parent_span_id": "", "name": "Crew.kickoff", "start_time_unix_nano": 1753086835534277300, "end_time_unix_nano": 1753086839643113700, "attributes": {"process": "\"sequential\"", "tasks": "\"[{'agent': 'Compliance Analyst', 'description': 'Perform comprehensive compliance analysis of transcript segment: {transcript_segment}\\\\nExecute multi-layered analysis approach:\\\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\\\n  discrimination, safety violations, confidentiality breaches, manipulation\\\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\\\n  * SEC violations (insider trading, market manipulation, disclosure)\\\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\\\n  * Workplace violations (harassment, discrimination, safety)\\\\n  * Financial crimes (money laundering, fraud indicators)\\\\n  * Confidentiality breaches (trade secrets, NDA violations)\\\\n\\\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\\\n  * SOX (financial reporting, internal controls)\\\\n  * GDPR/CCPA (data privacy and protection)\\\\n  * FCPA (foreign corrupt practices)\\\\n  * OSHA (workplace safety standards)\\\\n  * FINRA (financial industry conduct)\\\\n  * SEC regulations (securities and disclosure)\\\\n  * Employment law (anti-discrimination, harassment)\\\\n\\\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\\\n  * Code of conduct and ethics\\\\n  * Information security and data handling\\\\n  * Anti-harassment and discrimination policies\\\\n  * Conflict of interest guidelines\\\\n  * Communication and confidentiality standards\\\\n  * Trading and investment restrictions\\\\n\\\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\\\n  * Violation severity and legal exposure\\\\n  * Reputational damage potential\\\\n  * Financial impact likelihood\\\\n  * Regulatory enforcement probability\\\\n  * Business context and intent assessment\\\\n', 'async_execution': False, 'expected_output': 'Comprehensive compliance analysis containing: - ANALYSIS_VERDICT: SAFE or VIOLATION - ANALYSIS_METHOD: PRELIMINARY_SCREENING_ONLY or FULL_ANALYSIS_COMPLETED - KNOWLEDGE_BASE_STATUS: AVAILABLE/EMPTY/ERROR - CONFIDENCE_LEVEL: 1-100% - VIOLATION_TYPE: (if applicable - e.g., \\\"Financial Misconduct\\\", \\\"Privacy Violation\\\") - REGULATORY_FRAMEWORKS: List of applicable regulations - POLICY_VIOLATIONS: Internal policies breached - RISK_SEVERITY: LOW/MEDIUM/HIGH/CRITICAL - EVIDENCE_SUMMARY: Key factors supporting the determination - IMMEDIATE_CONCERNS: Urgent issues requiring attention - RECOMMENDED_ACTIONS: Specific steps to address violations\\\\n', 'human_input': False, 'tools': [JSONSearchTool(name=\\\"Search a JSON's content\\\", description='Tool Name: Search a JSON\\\\'s content\\\\nTool Arguments: {\\\\'search_query\\\\': {\\\\'description\\\\': \\\"Mandatory search query you want to use to search the JSON\\\\'s content\\\", \\\\'type\\\\': \\\\'str\\\\'}}\\\\nTool Description: A tool that can be used to semantic search a query the \\\\\\\\data.json JSON\\\\'s content.', env_vars=[], args_schema=<class 'crewai_tools.tools.json_search_tool.json_search_tool.FixedJSONSearchToolSchema'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x00000237BC7B04A0>, result_as_answer=False, max_usage_count=None, current_usage_count=0, summarize=False, adapter=EmbedchainAdapter(embedchain_app=<embedchain.app.App object at 0x00000237CE741790>, summarize=False), config={'llm': {'provider': 'google', 'config': {'model': 'gemini-pro'}}, 'embedding_model': {'provider': 'google', 'config': {'model': 'models/embedding-001', 'task_type': 'retrieval_document'}}})], 'output_file': None}, {'agent': 'Compliance Reporter', 'description': 'Generate final compliance report based on analysis results from compliance_analyst.\\\\nSynthesize the compliance analysis findings for transcript segment: {transcript_segment} and create executive-level compliance decision with clear actionable guidance.\\\\nREPORT STRUCTURE: - Executive summary of compliance status - Risk assessment and classification - Specific violations identified (if any) - Regulatory and policy implications - Required immediate actions - Escalation requirements - Monitoring and follow-up procedures - Alert level determination\\\\nDECISION LOGIC: For SAFE determinations: - Confirm no violations detected - Document analysis methodology used - Set appropriate monitoring level - Provide brief rationale for safety classification\\\\nFor VIOLATION determinations: - Detail specific compliance concerns identified - List regulatory/policy citations and frameworks - Outline mandatory immediate response actions - Specify required escalation procedures and stakeholders - Establish monitoring and remediation requirements - Determine alert level and notification protocols\\\\nESCALATION MATRIX: - ROUTINE: No violations, standard monitoring - PRIORITY: Minor concerns, enhanced monitoring recommended - URGENT: Clear violations, immediate management review required - EMERGENCY: Critical violations, legal/regulatory exposure, immediate escalation\\\\n', 'async_execution': False, 'expected_output': 'Final compliance report: - FINAL_VERDICT: SAFE or VIOLATION - EXECUTIVE_SUMMARY: High-level compliance status and key findings - ANALYSIS_CONFIDENCE: Overall confidence in determination (1-100%) - VIOLATION_DETAILS: Specific violations and supporting evidence (if any) - REGULATORY_CITATIONS: Applicable laws, regulations, and policies - RISK_CLASSIFICATION: Overall risk level (LOW/MEDIUM/HIGH/CRITICAL) - URGENCY_LEVEL: Response urgency (ROUTINE/PRIORITY/URGENT/EMERGENCY) - IMMEDIATE_ACTIONS: Required immediate response steps - RESPONSIBLE_PARTIES: Who needs to be notified/take action - ESCALATION_PATH: Management/legal/compliance escalation requirements - MONITORING_REQUIREMENTS: Ongoing monitoring and follow-up needed - ALERT_LEVEL: System alert classification - DOCUMENTATION_REQUIREMENTS: Records that must be maintained - FOLLOW_UP_TIMELINE: When and how to review/monitor situation\\\\n', 'human_input': False, 'tools': [JSONSearchTool(name=\\\"Search a JSON's content\\\", description='Tool Name: Search a JSON\\\\'s content\\\\nTool Arguments: {\\\\'search_query\\\\': {\\\\'description\\\\': \\\"Mandatory search query you want to use to search the JSON\\\\'s content\\\", \\\\'type\\\\': \\\\'str\\\\'}}\\\\nTool Description: A tool that can be used to semantic search a query the \\\\\\\\data.json JSON\\\\'s content.', env_vars=[], args_schema=<class 'crewai_tools.tools.json_search_tool.json_search_tool.FixedJSONSearchToolSchema'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x00000237BC7B04A0>, result_as_answer=False, max_usage_count=None, current_usage_count=0, summarize=False, adapter=EmbedchainAdapter(embedchain_app=<embedchain.app.App object at 0x00000237CE741790>, summarize=False), config={'llm': {'provider': 'google', 'config': {'model': 'gemini-pro'}}, 'embedding_model': {'provider': 'google', 'config': {'model': 'models/embedding-001', 'task_type': 'retrieval_document'}}})], 'output_file': None}]\"", "share_crew": "false", "id": "\"4f4ec17e-6f77-4982-91a0-bd85d81f9b1b\"", "cache": "true", "verbose": "true", "execution_logs": "\"[]\"", "embedder": "{\"provider\": \"google\", \"config\": {\"api_key\": \"AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ\", \"model\": \"models/embedding-001\"}}", "planning": "false", "security_config": "{\"version\": \"1.0.0\", \"fingerprint\": {\"uuid_str\": \"de75c27b-f90a-485c-a79e-bdd4bfcaf6cf\", \"created_at\": \"2025-07-21 11:33:55.158319\", \"metadata\": {}}}", "before_kickoff_callbacks": "\"[]\"", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\"", "after_kickoff_callbacks": "\"[<function crew.<locals>.wrapper.<locals>.callback_wrapper.<locals>.wrapper at 0x00000237D3668FE0>]\"", "mlflow.spanType": "\"CHAIN\"", "mlflow.spanInputs": "{\"inputs\": {\"transcript_segment\": \"انا عرضت data العملاء علي اخويا وهو قالي كدا\"}}", "memory": "true", "agents": "\"[{'id': '8d1fd9e2-4323-4700-920e-898ce0cfb66a', 'role': 'Compliance Analyst', 'goal': 'Perform comprehensive compliance analysis of input phrases using intelligent screening.\\\\nPHASE 1 - PRELIMINARY JUDGMENT: Use your expertise to quickly assess if the phrase is: - Obviously safe routine business communication (greetings, project updates, scheduling) - Clearly irrelevant to compliance concerns - Standard workplace conversation with no red flags\\\\nIf obviously safe, immediately respond with \\\"SAFE - No compliance concerns detected\\\" and provide brief reasoning.\\\\nPHASE 2 - DETAILED ANALYSIS: Only if the phrase contains potential risks, ambiguous content, or compliance-relevant keywords: - Search the knowledge base (data.json) for specific regulatory matches - Apply built-in compliance intelligence for violation detection - Analyze against regulatory frameworks (SEC, GDPR, FCPA, SOX, OSHA, etc.) - Evaluate policy violations and risk factors\\\\nIf knowledge base search yields no results, apply your expertise to determine if genuine violations exist. Provide detailed analysis findings including violation types, regulatory frameworks, risk levels, and evidence.\\\\n', 'backstory': 'You are a senior compliance analyst with deep expertise in regulatory frameworks, corporate policies,  and violation detection. You excel at quickly distinguishing between routine business communication  and genuine compliance risks. You rely on documented knowledge when available, but can apply your  extensive experience when knowledge bases are incomplete. You prioritize accuracy over false alarms  and provide thorough analysis only when warranted.\\\\n', 'cache': True, 'config': None, 'verbose': True, 'allow_delegation': False, 'tools': [JSONSearchTool(name=\\\"Search a JSON's content\\\", description='Tool Name: Search a JSON\\\\'s content\\\\nTool Arguments: {\\\\'search_query\\\\': {\\\\'description\\\\': \\\"Mandatory search query you want to use to search the JSON\\\\'s content\\\", \\\\'type\\\\': \\\\'str\\\\'}}\\\\nTool Description: A tool that can be used to semantic search a query the \\\\\\\\data.json JSON\\\\'s content.', env_vars=[], args_schema=<class 'crewai_tools.tools.json_search_tool.json_search_tool.FixedJSONSearchToolSchema'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x00000237BC7B04A0>, result_as_answer=False, max_usage_count=None, current_usage_count=0, summarize=False, adapter=EmbedchainAdapter(embedchain_app=<embedchain.app.App object at 0x00000237CE741790>, summarize=False), config={'llm': {'provider': 'google', 'config': {'model': 'gemini-pro'}}, 'embedding_model': {'provider': 'google', 'config': {'model': 'models/embedding-001', 'task_type': 'retrieval_document'}}})], 'max_iter': 25, 'llm': 'gemini/gemini-2.0-flash'}, {'id': '26b9b620-7413-4903-a21e-d36fc458c8b1', 'role': 'Compliance Reporter', 'goal': \\\"Generate executive-level compliance reports based on the compliance_analyst's findings.\\\\nCreate final compliance determinations with clear, actionable guidance:\\\\nFOR SAFE DETERMINATIONS: - Confirm the safety classification with confidence level - Document the analysis method used (preliminary screening vs. full analysis) - Provide brief executive summary - Set appropriate monitoring level (routine/standard)\\\\nFOR VIOLATION DETERMINATIONS: - Detail specific compliance violations and regulatory concerns - List applicable regulatory frameworks and policy breaches - Classify risk severity and urgency level - Outline required immediate actions and escalation procedures - Specify responsible parties and follow-up requirements - Determine alert level and notification protocols\\\\nAlways provide clear final verdicts: SAFE or VIOLATION Include confidence levels, risk classifications, and actionable next steps. Ensure executives can make informed decisions based on your reports.\\\\n\\\", 'backstory': 'You are an experienced compliance reporting specialist who translates technical compliance  analysis into clear, actionable executive guidance. You excel at synthesizing complex  regulatory findings into concise reports that enable quick decision-making. You understand  business impact, escalation requirements, and risk management. Your reports are trusted  by senior management for their accuracy, clarity, and practical recommendations. You ensure  appropriate responses to both genuine violations and false alarms.\\\\n', 'cache': True, 'config': None, 'verbose': True, 'allow_delegation': True, 'tools': [JSONSearchTool(name=\\\"Search a JSON's content\\\", description='Tool Name: Search a JSON\\\\'s content\\\\nTool Arguments: {\\\\'search_query\\\\': {\\\\'description\\\\': \\\"Mandatory search query you want to use to search the JSON\\\\'s content\\\", \\\\'type\\\\': \\\\'str\\\\'}}\\\\nTool Description: A tool that can be used to semantic search a query the \\\\\\\\data.json JSON\\\\'s content.', env_vars=[], args_schema=<class 'crewai_tools.tools.json_search_tool.json_search_tool.FixedJSONSearchToolSchema'>, description_updated=False, cache_function=<function BaseTool.<lambda> at 0x00000237BC7B04A0>, result_as_answer=False, max_usage_count=None, current_usage_count=0, summarize=False, adapter=EmbedchainAdapter(embedchain_app=<embedchain.app.App object at 0x00000237CE741790>, summarize=False), config={'llm': {'provider': 'google', 'config': {'model': 'gemini-pro'}}, 'embedding_model': {'provider': 'google', 'config': {'model': 'models/embedding-001', 'task_type': 'retrieval_document'}}})], 'max_iter': 25, 'llm': 'gemini/gemini-2.0-flash'}]\""}, "events": [{"time_unix_nano": 1753086839643113700, "name": "exception", "attributes": {"exception.type": "litellm.exceptions.InternalServerError", "exception.message": "litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "exception.stacktrace": "Traceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1809, in completion\n    response = client.post(url=url, headers=headers, json=data)  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 707, in post\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 689, in post\n    response.raise_for_status()\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\httpx\\_models.py\", line 763, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 2509, in completion\n    response = vertex_chat_completion.completion(  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1813, in completion\n    raise VertexAIError(\nlitellm.llms.vertex_ai.common_utils.VertexAIError: {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\opentelemetry\\trace\\__init__.py\", line 589, in use_span\n    yield span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\tracing\\fluent.py\", line 478, in start_span\n    yield mlflow_span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\crew.py\", line 669, in kickoff\n    result = self._run_sequential_process()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\crew.py\", line 780, in _run_sequential_process\n    return self._execute_tasks(self.tasks)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\crew.py\", line 883, in _execute_tasks\n    task_output = task.execute_sync(\n                  ^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 484, in safe_patch_function\n    patch_function(call_original, *args, **kwargs)\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\task.py\", line 356, in execute_sync\n    return self._execute_core(agent, context, tools)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\task.py\", line 504, in _execute_core\n    raise e  # Re-raise the exception after emitting the event\n    ^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\task.py\", line 420, in _execute_core\n    result = agent.execute_task(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 484, in safe_patch_function\n    patch_function(call_original, *args, **kwargs)\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 462, in execute_task\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 438, in execute_task\n    result = self._execute_without_timeout(task_prompt, task)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 534, in _execute_without_timeout\n    return self.agent_executor.invoke(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 125, in invoke\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 114, in invoke\n    formatted_answer = self._invoke_loop()\n                       ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 211, in _invoke_loop\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 157, in _invoke_loop\n    answer = get_llm_response(\n             ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\utilities\\agent_utils.py\", line 164, in get_llm_response\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\utilities\\agent_utils.py\", line 153, in get_llm_response\n    answer = llm.call(\n             ^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 484, in safe_patch_function\n    patch_function(call_original, *args, **kwargs)\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 977, in call\n    return self._handle_non_streaming_response(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 782, in _handle_non_streaming_response\n    response = litellm.completion(**params)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1285, in wrapper\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1163, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 3304, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2271, in exception_type\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 1262, in exception_type\n    raise litellm.InternalServerError(\nlitellm.exceptions.InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n", "exception.escaped": "False"}}], "status": {"message": "InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "code": "STATUS_CODE_ERROR"}}, {"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "HZeIfaaMM8s=", "trace_state": "", "parent_span_id": "fcVQ9lFwF94=", "name": "Task.execute_sync", "start_time_unix_nano": 1753086835549764100, "end_time_unix_nano": 1753086839633125000, "attributes": {"description": "\"Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\\n\"", "context": "\"NOT_SPECIFIED\"", "id": "\"604bc4cb-ca5e-442f-9fc9-3fe098cf516a\"", "human_input": "\"False\"", "delegations": "\"0\"", "tools_errors": "\"0\"", "create_directory": "\"True\"", "async_execution": "\"False\"", "agent": "\"Compliance Analyst\"", "name": "\"compliance_analysis_task\"", "tools": "\"[{'type': 'function', 'function': {'name': \\\"Search a JSON's content\\\", 'description': 'Tool Name: Search a JSON\\\\'s content\\\\nTool Arguments: {\\\\'search_query\\\\': {\\\\'description\\\\': \\\"Mandatory search query you want to use to search the JSON\\\\'s content\\\", \\\\'type\\\\': \\\\'str\\\\'}}\\\\nTool Description: A tool that can be used to semantic search a query the \\\\\\\\data.json JSON\\\\'s content.'}}]\"", "security_config": "\"version='1.0.0' fingerprint=Fingerprint(uuid_str='93777dad-0352-413f-9d72-79d90a52f7fd', created_at=datetime.datetime(2025, 7, 21, 11, 33, 55, 158319), metadata={})\"", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\"", "processed_by_agents": "\"set()\"", "markdown": "\"False\"", "mlflow.spanType": "\"CHAIN\"", "mlflow.spanInputs": "{\"context\": \"\", \"tools\": [{\"name\": \"Search a JSON's content\", \"description\": \"Tool Name: Search a JSON's content\\nTool Arguments: {'search_query': {'description': \\\"Mandatory search query you want to use to search the JSON's content\\\", 'type': 'str'}}\\nTool Description: A tool that can be used to semantic search a query the \\\\data.json JSON's content.\", \"env_vars\": [], \"args_schema\": \"<class 'crewai_tools.tools.json_search_tool.json_search_tool.FixedJSONSearchToolSchema'>\", \"description_updated\": false, \"cache_function\": \"<function BaseTool.<lambda> at 0x00000237BC7B04A0>\", \"result_as_answer\": false, \"max_usage_count\": null, \"current_usage_count\": 0, \"summarize\": false, \"adapter\": {}, \"config\": {\"llm\": {\"provider\": \"google\", \"config\": {\"model\": \"gemini-pro\"}}, \"embedding_model\": {\"provider\": \"google\", \"config\": {\"model\": \"models/embedding-001\", \"task_type\": \"retrieval_document\"}}}}]}", "expected_output": "\"Comprehensive compliance analysis containing: - ANALYSIS_VERDICT: SAFE or VIOLATION - ANALYSIS_METHOD: PRELIMINARY_SCREENING_ONLY or FULL_ANALYSIS_COMPLETED - KNOWLEDGE_BASE_STATUS: AVAILABLE/EMPTY/ERROR - CONFIDENCE_LEVEL: 1-100% - VIOLATION_TYPE: (if applicable - e.g., \\\"Financial Misconduct\\\", \\\"Privacy Violation\\\") - REGULATORY_FRAMEWORKS: List of applicable regulations - POLICY_VIOLATIONS: Internal policies breached - RISK_SEVERITY: LOW/MEDIUM/HIGH/CRITICAL - EVIDENCE_SUMMARY: Key factors supporting the determination - IMMEDIATE_CONCERNS: Urgent issues requiring attention - RECOMMENDED_ACTIONS: Specific steps to address violations\\n\"", "max_retries": "\"3\"", "i18n": "\"prompt_file=None\"", "used_tools": "\"0\"", "retry_count": "\"0\""}, "events": [{"time_unix_nano": 1753086839633125000, "name": "exception", "attributes": {"exception.type": "litellm.exceptions.InternalServerError", "exception.message": "litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "exception.stacktrace": "Traceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1809, in completion\n    response = client.post(url=url, headers=headers, json=data)  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 707, in post\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 689, in post\n    response.raise_for_status()\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\httpx\\_models.py\", line 763, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 2509, in completion\n    response = vertex_chat_completion.completion(  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1813, in completion\n    raise VertexAIError(\nlitellm.llms.vertex_ai.common_utils.VertexAIError: {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\opentelemetry\\trace\\__init__.py\", line 589, in use_span\n    yield span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\tracing\\fluent.py\", line 478, in start_span\n    yield mlflow_span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\task.py\", line 356, in execute_sync\n    return self._execute_core(agent, context, tools)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\task.py\", line 504, in _execute_core\n    raise e  # Re-raise the exception after emitting the event\n    ^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\task.py\", line 420, in _execute_core\n    result = agent.execute_task(\n             ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 484, in safe_patch_function\n    patch_function(call_original, *args, **kwargs)\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 462, in execute_task\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 438, in execute_task\n    result = self._execute_without_timeout(task_prompt, task)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 534, in _execute_without_timeout\n    return self.agent_executor.invoke(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 125, in invoke\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 114, in invoke\n    formatted_answer = self._invoke_loop()\n                       ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 211, in _invoke_loop\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 157, in _invoke_loop\n    answer = get_llm_response(\n             ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\utilities\\agent_utils.py\", line 164, in get_llm_response\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\utilities\\agent_utils.py\", line 153, in get_llm_response\n    answer = llm.call(\n             ^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 484, in safe_patch_function\n    patch_function(call_original, *args, **kwargs)\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 977, in call\n    return self._handle_non_streaming_response(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 782, in _handle_non_streaming_response\n    response = litellm.completion(**params)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1285, in wrapper\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1163, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 3304, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2271, in exception_type\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 1262, in exception_type\n    raise litellm.InternalServerError(\nlitellm.exceptions.InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n", "exception.escaped": "False"}}], "status": {"message": "InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "code": "STATUS_CODE_ERROR"}}, {"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "3B3hmQNnsOM=", "trace_state": "", "parent_span_id": "HZeIfaaMM8s=", "name": "Agent.execute_task", "start_time_unix_nano": 1753086835574174200, "end_time_unix_nano": 1753086839618881900, "attributes": {"crew": "\"parent_flow=None name=None cache=True tasks=[Task(description=Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\\n, expected_output=Comprehensive compliance analysis containing: - ANALYSIS_VERDICT: SAFE or VIOLATION - ANALYSIS_METHOD: PRELIMINARY_SCREENING_ONLY or FULL_ANALYSIS_COMPLETED - KNOWLEDGE_BASE_STATUS: AVAILABLE/EMPTY/ERROR - CONFIDENCE_LEVEL: 1-100% - VIOLATION_TYPE: (if applicable - e.g., \\\"Financial Misconduct\\\", \\\"Privacy Violation\\\") - REGULATORY_FRAMEWORKS: List of applicable regulations - POLICY_VIOLATIONS: Internal policies breached - RISK_SEVERITY: LOW/MEDIUM/HIGH/CRITICAL - EVIDENCE_SUMMARY: Key factors supporting the determination - IMMEDIATE_CONCERNS: Urgent issues requiring attention - RECOMMENDED_ACTIONS: Specific steps to address violations\\n), Task(description=Generate final compliance report based on analysis results from compliance_analyst.\\nSynthesize the compliance analysis findings for transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا and create executive-level compliance decision with clear actionable guidance.\\nREPORT STRUCTURE: - Executive summary of compliance status - Risk assessment and classification - Specific violations identified (if any) - Regulatory and policy implications - Required immediate actions - Escalation requirements - Monitoring and follow-up procedures - Alert level determination\\nDECISION LOGIC: For SAFE determinations: - Confirm no violations detected - Document analysis methodology used - Set appropriate monitoring level - Provide brief rationale for safety classification\\nFor VIOLATION determinations: - Detail specific compliance concerns identified - List regulatory/policy citations and frameworks - Outline mandatory immediate response actions - Specify required escalation procedures and stakeholders - Establish monitoring and remediation requirements - Determine alert level and notification protocols\\nESCALATION MATRIX: - ROUTINE: No violations, standard monitoring - PRIORITY: Minor concerns, enhanced monitoring recommended - URGENT: Clear violations, immediate management review required - EMERGENCY: Critical violations, legal/regulatory exposure, immediate escalation\\n, expected_output=Final compliance report: - FINAL_VERDICT: SAFE or VIOLATION - EXECUTIVE_SUMMARY: High-level compliance status and key findings - ANALYSIS_CONFIDENCE: Overall confidence in determination (1-100%) - VIOLATION_DETAILS: Specific violations and supporting evidence (if any) - REGULATORY_CITATIONS: Applicable laws, regulations, and policies - RISK_CLASSIFICATION: Overall risk level (LOW/MEDIUM/HIGH/CRITICAL) - URGENCY_LEVEL: Response urgency (ROUTINE/PRIORITY/URGENT/EMERGENCY) - IMMEDIATE_ACTIONS: Required immediate response steps - RESPONSIBLE_PARTIES: Who needs to be notified/take action - ESCALATION_PATH: Management/legal/compliance escalation requirements - MONITORING_REQUIREMENTS: Ongoing monitoring and follow-up needed - ALERT_LEVEL: System alert classification - DOCUMENTATION_REQUIREMENTS: Records that must be maintained - FOLLOW_UP_TIMELINE: When and how to review/monitor situation\\n)] agents=[Agent(role=Compliance Analyst, goal=Perform comprehensive compliance analysis of input phrases using intelligent screening.\\nPHASE 1 - PRELIMINARY JUDGMENT: Use your expertise to quickly assess if the phrase is: - Obviously safe routine business communication (greetings, project updates, scheduling) - Clearly irrelevant to compliance concerns - Standard workplace conversation with no red flags\\nIf obviously safe, immediately respond with \\\"SAFE - No compliance concerns detected\\\" and provide brief reasoning.\\nPHASE 2 - DETAILED ANALYSIS: Only if the phrase contains potential risks, ambiguous content, or compliance-relevant keywords: - Search the knowledge base (data.json) for specific regulatory matches - Apply built-in compliance intelligence for violation detection - Analyze against regulatory frameworks (SEC, GDPR, FCPA, SOX, OSHA, etc.) - Evaluate policy violations and risk factors\\nIf knowledge base search yields no results, apply your expertise to determine if genuine violations exist. Provide detailed analysis findings including violation types, regulatory frameworks, risk levels, and evidence.\\n, backstory=You are a senior compliance analyst with deep expertise in regulatory frameworks, corporate policies,  and violation detection. You excel at quickly distinguishing between routine business communication  and genuine compliance risks. You rely on documented knowledge when available, but can apply your  extensive experience when knowledge bases are incomplete. You prioritize accuracy over false alarms  and provide thorough analysis only when warranted.\\n), Agent(role=Compliance Reporter, goal=Generate executive-level compliance reports based on the compliance_analyst's findings.\\nCreate final compliance determinations with clear, actionable guidance:\\nFOR SAFE DETERMINATIONS: - Confirm the safety classification with confidence level - Document the analysis method used (preliminary screening vs. full analysis) - Provide brief executive summary - Set appropriate monitoring level (routine/standard)\\nFOR VIOLATION DETERMINATIONS: - Detail specific compliance violations and regulatory concerns - List applicable regulatory frameworks and policy breaches - Classify risk severity and urgency level - Outline required immediate actions and escalation procedures - Specify responsible parties and follow-up requirements - Determine alert level and notification protocols\\nAlways provide clear final verdicts: SAFE or VIOLATION Include confidence levels, risk classifications, and actionable next steps. Ensure executives can make informed decisions based on your reports.\\n, backstory=You are an experienced compliance reporting specialist who translates technical compliance  analysis into clear, actionable executive guidance. You excel at synthesizing complex  regulatory findings into concise reports that enable quick decision-making. You understand  business impact, escalation requirements, and risk management. Your reports are trusted  by senior management for their accuracy, clarity, and practical recommendations. You ensure  appropriate responses to both genuine violations and false alarms.\\n)] process=<Process.sequential: 'sequential'> verbose=True memory=True memory_config=None short_term_memory=None long_term_memory=None entity_memory=None user_memory=None external_memory=None embedder={'provider': 'google', 'config': {'api_key': 'AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ', 'model': 'models/embedding-001'}} usage_metrics=None manager_llm=None manager_agent=None function_calling_llm=None config=None id=UUID('4f4ec17e-6f77-4982-91a0-bd85d81f9b1b') share_crew=False step_callback=None task_callback=None before_kickoff_callbacks=[] after_kickoff_callbacks=[<function crew.<locals>.wrapper.<locals>.callback_wrapper.<locals>.wrapper at 0x00000237D3668FE0>] max_rpm=None prompt_file=None output_log_file=None planning=False planning_llm=None task_execution_output_json_files=None execution_logs=[] knowledge_sources=None chat_llm=None knowledge=None security_config=SecurityConfig(version='1.0.0', fingerprint=Fingerprint(uuid_str='de75c27b-f90a-485c-a79e-bdd4bfcaf6cf', created_at=datetime.datetime(2025, 7, 21, 11, 33, 55, 158319), metadata={}))\"", "date_format": "\"%Y-%m-%d\"", "tools_handler": "\"<crewai.agents.tools_handler.ToolsHandler object at 0x00000237D1BDE5D0>\"", "cache": "\"True\"", "adapted_agent": "\"False\"", "embedder": "\"{'provider': 'google', 'config': {'api_key': 'AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ', 'model': 'models/embedding-001'}}\"", "use_system_prompt": "\"True\"", "tools": "\"[{'type': 'function', 'function': {'name': \\\"Search a JSON's content\\\", 'description': 'Tool Name: Search a JSON\\\\'s content\\\\nTool Arguments: {\\\\'search_query\\\\': {\\\\'description\\\\': \\\"Mandatory search query you want to use to search the JSON\\\\'s content\\\", \\\\'type\\\\': \\\\'str\\\\'}}\\\\nTool Description: A tool that can be used to semantic search a query the \\\\\\\\data.json JSON\\\\'s content.'}}]\"", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\"", "mlflow.spanType": "\"AGENT\"", "llm": "\"<crewai.llm.LLM object at 0x00000237D366F850>\"", "agent_executor": "\"<crewai.agents.crew_agent_executor.CrewAgentExecutor object at 0x00000237CD29A410>\"", "code_execution_mode": "\"safe\"", "i18n": "\"prompt_file=None\"", "max_iter": "\"25\"", "cache_handler": "\"\"", "tools_results": "\"[]\"", "agent_ops_agent_name": "\"Compliance Analyst\"", "id": "\"8d1fd9e2-4323-4700-920e-898ce0cfb66a\"", "verbose": "\"True\"", "goal": "\"Perform comprehensive compliance analysis of input phrases using intelligent screening.\\nPHASE 1 - PRELIMINARY JUDGMENT: Use your expertise to quickly assess if the phrase is: - Obviously safe routine business communication (greetings, project updates, scheduling) - Clearly irrelevant to compliance concerns - Standard workplace conversation with no red flags\\nIf obviously safe, immediately respond with \\\"SAFE - No compliance concerns detected\\\" and provide brief reasoning.\\nPHASE 2 - DETAILED ANALYSIS: Only if the phrase contains potential risks, ambiguous content, or compliance-relevant keywords: - Search the knowledge base (data.json) for specific regulatory matches - Apply built-in compliance intelligence for violation detection - Analyze against regulatory frameworks (SEC, GDPR, FCPA, SOX, OSHA, etc.) - Evaluate policy violations and risk factors\\nIf knowledge base search yields no results, apply your expertise to determine if genuine violations exist. Provide detailed analysis findings including violation types, regulatory frameworks, risk levels, and evidence.\\n\"", "respect_context_window": "\"True\"", "security_config": "\"version='1.0.0' fingerprint=Fingerprint(uuid_str='ecc82da0-c45b-4459-b15d-3d5e7cd66530', created_at=datetime.datetime(2025, 7, 21, 11, 33, 55, 154299), metadata={})\"", "backstory": "\"You are a senior compliance analyst with deep expertise in regulatory frameworks, corporate policies,  and violation detection. You excel at quickly distinguishing between routine business communication  and genuine compliance risks. You rely on documented knowledge when available, but can apply your  extensive experience when knowledge bases are incomplete. You prioritize accuracy over false alarms  and provide thorough analysis only when warranted.\\n\"", "allow_delegation": "\"False\"", "role": "\"Compliance Analyst\"", "callbacks": "\"[]\"", "multimodal": "\"False\"", "mlflow.spanInputs": "{\"context\": \"\", \"tools\": [{\"name\": \"Search a JSON's content\", \"description\": \"Tool Name: Search a JSON's content\\nTool Arguments: {'search_query': {'description': \\\"Mandatory search query you want to use to search the JSON's content\\\", 'type': 'str'}}\\nTool Description: A tool that can be used to semantic search a query the \\\\data.json JSON's content.\", \"env_vars\": [], \"args_schema\": \"<class 'crewai_tools.tools.json_search_tool.json_search_tool.FixedJSONSearchToolSchema'>\", \"description_updated\": false, \"cache_function\": \"<function BaseTool.<lambda> at 0x00000237BC7B04A0>\", \"result_as_answer\": false, \"max_usage_count\": null, \"current_usage_count\": 0, \"summarize\": false, \"adapter\": {}, \"config\": {\"llm\": {\"provider\": \"google\", \"config\": {\"model\": \"gemini-pro\"}}, \"embedding_model\": {\"provider\": \"google\", \"config\": {\"model\": \"models/embedding-001\", \"task_type\": \"retrieval_document\"}}}}]}", "reasoning": "\"False\"", "max_retry_limit": "\"2\"", "allow_code_execution": "\"False\"", "guardrail_max_retries": "\"3\"", "inject_date": "\"False\""}, "events": [{"time_unix_nano": 1753086839618881900, "name": "exception", "attributes": {"exception.type": "litellm.exceptions.InternalServerError", "exception.message": "litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "exception.stacktrace": "Traceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1809, in completion\n    response = client.post(url=url, headers=headers, json=data)  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 707, in post\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 689, in post\n    response.raise_for_status()\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\httpx\\_models.py\", line 763, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 2509, in completion\n    response = vertex_chat_completion.completion(  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1813, in completion\n    raise VertexAIError(\nlitellm.llms.vertex_ai.common_utils.VertexAIError: {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\opentelemetry\\trace\\__init__.py\", line 589, in use_span\n    yield span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\tracing\\fluent.py\", line 478, in start_span\n    yield mlflow_span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 462, in execute_task\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 438, in execute_task\n    result = self._execute_without_timeout(task_prompt, task)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agent.py\", line 534, in _execute_without_timeout\n    return self.agent_executor.invoke(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 125, in invoke\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 114, in invoke\n    formatted_answer = self._invoke_loop()\n                       ^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 211, in _invoke_loop\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\agents\\crew_agent_executor.py\", line 157, in _invoke_loop\n    answer = get_llm_response(\n             ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\utilities\\agent_utils.py\", line 164, in get_llm_response\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\utilities\\agent_utils.py\", line 153, in get_llm_response\n    answer = llm.call(\n             ^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 484, in safe_patch_function\n    patch_function(call_original, *args, **kwargs)\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 977, in call\n    return self._handle_non_streaming_response(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 782, in _handle_non_streaming_response\n    response = litellm.completion(**params)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1285, in wrapper\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1163, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 3304, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2271, in exception_type\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 1262, in exception_type\n    raise litellm.InternalServerError(\nlitellm.exceptions.InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n", "exception.escaped": "False"}}], "status": {"message": "InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "code": "STATUS_CODE_ERROR"}}, {"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "noD7a8SrEoU=", "trace_state": "", "parent_span_id": "3B3hmQNnsOM=", "name": "LongTermMemory.search", "start_time_unix_nano": 1753086835580753600, "end_time_unix_nano": 1753086835580753600, "attributes": {"mlflow.spanOutputs": "null", "mlflow.spanType": "\"RETRIEVER\"", "mlflow.spanInputs": "{\"task\": \"Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\\n\", \"latest_n\": 2}", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\""}, "status": {"message": "", "code": "STATUS_CODE_OK"}}, {"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "K8lkskjEGq0=", "trace_state": "", "parent_span_id": "3B3hmQNnsOM=", "name": "ShortTermMemory.search", "start_time_unix_nano": 1753086835580753600, "end_time_unix_nano": 1753086836626465900, "attributes": {"mlflow.spanOutputs": "[{\"id\": \"a17db0e5-6689-48ea-bb8d-a8095978d447\", \"metadata\": {\"agent\": \"Compliance Analyst\", \"observation\": \"Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\\n\\n\\nReasoning Plan:\\n1. Translate the transcript segment to english. \\n2. Scan the translated transcript for compliance red flags using keywords and patterns. \\n3. If no red flags are identified, classify as SAFE and provide reasoning.\\n4. If red flags are identified, execute a detailed analysis, including regulatory framework mapping, policy violation assessment and risk classification. \\n5. Generate comprehensive compliance analysis containing: ANALYSIS_VERDICT, ANALYSIS_METHOD, KNOWLEDGE_BASE_STATUS, CONFIDENCE_LEVEL, VIOLATION_TYPE, REGULATORY_FRAMEWORKS, POLICY_VIOLATIONS, RISK_SEVERITY, EVIDENCE_SUMMARY, IMMEDIATE_CONCERNS and RECOMMENDED_ACTIONS.\"}, \"context\": \": ```json\\n{\\n \\\"query\\\": \\\"Translate 'انا عرضت data العملاء علي اخويا وهو قالي كدا' to English\\\",\\n \\\"response\\\": \\\"I showed customer data to my brother and he told me that.\\\"\\n}\\n```\\n\", \"score\": 0.7072414545894505}]", "mlflow.spanType": "\"RETRIEVER\"", "mlflow.spanInputs": "{\"query\": \"Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\"}", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\""}, "status": {"message": "", "code": "STATUS_CODE_OK"}}, {"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "Vkd7tKhgiVA=", "trace_state": "", "parent_span_id": "3B3hmQNnsOM=", "name": "EntityMemory.search", "start_time_unix_nano": 1753086836628472500, "end_time_unix_nano": 1753086837639695100, "attributes": {"mlflow.spanOutputs": "[{\"id\": \"2a2ebbce-1578-4ac4-aef2-f64f4a8b79d1\", \"metadata\": {\"relationships\": \"- shared with brother\"}, \"context\": \"customer data(Data): Information pertaining to customers\", \"score\": 0.7721752600481391}]", "mlflow.spanType": "\"RETRIEVER\"", "mlflow.spanInputs": "{\"query\": \"Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\"}", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\""}, "status": {"message": "", "code": "STATUS_CODE_OK"}}, {"trace_id": "vqCnItT2usnx6gIKkPjSaA==", "span_id": "5+QYewRJbPM=", "trace_state": "", "parent_span_id": "3B3hmQNnsOM=", "name": "LLM.call", "start_time_unix_nano": 1753086837652133400, "end_time_unix_nano": 1753086839609007600, "attributes": {"stop": "\"['\\\\nObservation:']\"", "mlflow.traceRequestId": "\"68bd87a743244acfbf16e72a6ef9ba15\"", "additional_params": "\"{}\"", "model": "\"gemini/gemini-2.0-flash\"", "mlflow.spanType": "\"LLM\"", "mlflow.spanInputs": "{\"messages\": [{\"role\": \"system\", \"content\": \"You are Compliance Analyst. You are a senior compliance analyst with deep expertise in regulatory frameworks, corporate policies,  and violation detection. You excel at quickly distinguishing between routine business communication  and genuine compliance risks. You rely on documented knowledge when available, but can apply your  extensive experience when knowledge bases are incomplete. You prioritize accuracy over false alarms  and provide thorough analysis only when warranted.\\n\\nYour personal goal is: Perform comprehensive compliance analysis of input phrases using intelligent screening.\\nPHASE 1 - PRELIMINARY JUDGMENT: Use your expertise to quickly assess if the phrase is: - Obviously safe routine business communication (greetings, project updates, scheduling) - Clearly irrelevant to compliance concerns - Standard workplace conversation with no red flags\\nIf obviously safe, immediately respond with \\\"SAFE - No compliance concerns detected\\\" and provide brief reasoning.\\nPHASE 2 - DETAILED ANALYSIS: Only if the phrase contains potential risks, ambiguous content, or compliance-relevant keywords: - Search the knowledge base (data.json) for specific regulatory matches - Apply built-in compliance intelligence for violation detection - Analyze against regulatory frameworks (SEC, GDPR, FCPA, SOX, OSHA, etc.) - Evaluate policy violations and risk factors\\nIf knowledge base search yields no results, apply your expertise to determine if genuine violations exist. Provide detailed analysis findings including violation types, regulatory frameworks, risk levels, and evidence.\\n\\nYou ONLY have access to the following tools, and should NEVER make up tools that are not listed here:\\n\\nTool Name: Search a JSON's content\\nTool Arguments: {'search_query': {'description': \\\"Mandatory search query you want to use to search the JSON's content\\\", 'type': 'str'}}\\nTool Description: A tool that can be used to semantic search a query the \\\\data.json JSON's content.\\n\\nIMPORTANT: Use the following format in your response:\\n\\n```\\nThought: you should always think about what to do\\nAction: the action to take, only one name of [Search a JSON's content], just the name, exactly as it's written.\\nAction Input: the input to the action, just a simple JSON object, enclosed in curly braces, using \\\" to wrap keys and values.\\nObservation: the result of the action\\n```\\n\\nOnce all necessary information is gathered, return the following format:\\n\\n```\\nThought: I now know the final answer\\nFinal Answer: the final answer to the original input question\\n```\"}, {\"role\": \"user\", \"content\": \"\\nCurrent Task: Perform comprehensive compliance analysis of transcript segment: انا عرضت data العملاء علي اخويا وهو قالي كدا\\nExecute multi-layered analysis approach:\\nPHASE 1 - PRELIMINARY SCREENING: - Scan for obvious compliance red flags using built-in patterns - Check for violation keywords: bribe, kickback, insider trading, harassment,\\n  discrimination, safety violations, confidentiality breaches, manipulation\\n- Assess if segment is routine business communication or potential violation - If clearly safe, skip intensive analysis and return SAFE verdict\\nPHASE 2 - DETAILED ANALYSIS (only if Phase 1 flags concerns): - Query JSON knowledge base for specific regulatory/policy matches - If knowledge base empty/unavailable, apply built-in compliance intelligence:\\n  * SEC violations (insider trading, market manipulation, disclosure)\\n  * GDPR/Privacy (unauthorized data sharing, consent violations)\\n  * Anti-bribery/FCPA (corrupt practices, improper payments)\\n  * Workplace violations (harassment, discrimination, safety)\\n  * Financial crimes (money laundering, fraud indicators)\\n  * Confidentiality breaches (trade secrets, NDA violations)\\n\\nPHASE 3 - REGULATORY FRAMEWORK MAPPING: - Match detected violations to applicable regulations:\\n  * SOX (financial reporting, internal controls)\\n  * GDPR/CCPA (data privacy and protection)\\n  * FCPA (foreign corrupt practices)\\n  * OSHA (workplace safety standards)\\n  * FINRA (financial industry conduct)\\n  * SEC regulations (securities and disclosure)\\n  * Employment law (anti-discrimination, harassment)\\n\\nPHASE 4 - POLICY VIOLATION ASSESSMENT: - Evaluate against standard corporate policies:\\n  * Code of conduct and ethics\\n  * Information security and data handling\\n  * Anti-harassment and discrimination policies\\n  * Conflict of interest guidelines\\n  * Communication and confidentiality standards\\n  * Trading and investment restrictions\\n\\nPHASE 5 - RISK CLASSIFICATION: - Determine overall risk level based on:\\n  * Violation severity and legal exposure\\n  * Reputational damage potential\\n  * Financial impact likelihood\\n  * Regulatory enforcement probability\\n  * Business context and intent assessment\\n\\n\\nThis is the expected criteria for your final answer: Comprehensive compliance analysis containing: - ANALYSIS_VERDICT: SAFE or VIOLATION - ANALYSIS_METHOD: PRELIMINARY_SCREENING_ONLY or FULL_ANALYSIS_COMPLETED - KNOWLEDGE_BASE_STATUS: AVAILABLE/EMPTY/ERROR - CONFIDENCE_LEVEL: 1-100% - VIOLATION_TYPE: (if applicable - e.g., \\\"Financial Misconduct\\\", \\\"Privacy Violation\\\") - REGULATORY_FRAMEWORKS: List of applicable regulations - POLICY_VIOLATIONS: Internal policies breached - RISK_SEVERITY: LOW/MEDIUM/HIGH/CRITICAL - EVIDENCE_SUMMARY: Key factors supporting the determination - IMMEDIATE_CONCERNS: Urgent issues requiring attention - RECOMMENDED_ACTIONS: Specific steps to address violations\\n\\nyou MUST return the actual complete content as the final answer, not a summary.\\n\\n# Useful context: \\nRecent Insights:\\n- : ```json\\n{\\n \\\"query\\\": \\\"Translate 'انا عرضت data العملاء علي اخويا وهو قالي كدا' to English\\\",\\n \\\"response\\\": \\\"I showed customer data to my brother and he told me that.\\\"\\n}\\n```\\n\\nEntities:\\n- customer data(Data): Information pertaining to customers\\n\\nBegin! This is VERY important to you, use the tools available and give your best Final Answer, your job depends on it!\\n\\nThought:\"}], \"callbacks\": [\"<crewai.utilities.token_counter_callback.TokenCalcHandler object at 0x00000237CC30DC90>\"]}", "is_anthropic": "\"False\"", "context_window_size": "\"0\"", "stream": "\"False\""}, "events": [{"time_unix_nano": 1753086839609007600, "name": "exception", "attributes": {"exception.type": "litellm.exceptions.InternalServerError", "exception.message": "litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "exception.stacktrace": "Traceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1809, in completion\n    response = client.post(url=url, headers=headers, json=data)  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 707, in post\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\custom_httpx\\http_handler.py\", line 689, in post\n    response.raise_for_status()\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\httpx\\_models.py\", line 763, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 Service Unavailable' for url 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyBOa8hbORe8OkMGCVTkQ1YqThCMaQ3HukQ'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 2509, in completion\n    response = vertex_chat_completion.completion(  # type: ignore\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\llms\\vertex_ai\\gemini\\vertex_and_google_ai_studio_gemini.py\", line 1813, in completion\n    raise VertexAIError(\nlitellm.llms.vertex_ai.common_utils.VertexAIError: {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\opentelemetry\\trace\\__init__.py\", line 589, in use_span\n    yield span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\tracing\\fluent.py\", line 478, in start_span\n    yield mlflow_span\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\crewai\\autolog.py\", line 28, in patched_class_call\n    result = original(self, *args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 475, in call_original\n    return call_original_fn_with_event_logging(_original_fn, og_args, og_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 426, in call_original_fn_with_event_logging\n    original_fn_result = original_fn(*og_args, **og_kwargs)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\mlflow\\utils\\autologging_utils\\safety.py\", line 472, in _original_fn\n    original_result = original(*_og_args, **_og_kwargs)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 977, in call\n    return self._handle_non_streaming_response(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\crewai\\llm.py\", line 782, in _handle_non_streaming_response\n    response = litellm.completion(**params)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1285, in wrapper\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\utils.py\", line 1163, in wrapper\n    result = original_function(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\main.py\", line 3304, in completion\n    raise exception_type(\n          ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 2271, in exception_type\n    raise e\n  File \"C:\\Users\\amros\\.conda\\envs\\whisper_test\\Lib\\site-packages\\litellm\\litellm_core_utils\\exception_mapping_utils.py\", line 1262, in exception_type\n    raise litellm.InternalServerError(\nlitellm.exceptions.InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n\n", "exception.escaped": "False"}}], "status": {"message": "InternalServerError: litellm.InternalServerError: litellm.InternalServerError: VertexAIException - {\n  \"error\": {\n    \"code\": 503,\n    \"message\": \"The model is overloaded. Please try again later.\",\n    \"status\": \"UNAVAILABLE\"\n  }\n}\n", "code": "STATUS_CODE_ERROR"}}]}